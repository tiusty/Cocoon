"""
Django settings for Unicorn project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#o3k!ghm%yfnscj1bam=p*ml=$ct9b0j00-bkv@-%%=jk&54g('

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cocoon.homePage',
    'cocoon.userAuth',
    'cocoon.survey',
    'cocoon.houseDatabase',
    'cocoon.commutes',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../cocoon/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cocoon.userAuth.context_processors.userAuth_processors.add_favorite_homes_processor',
                'cocoon.userAuth.context_processors.userAuth_processors.add_visit_home_list_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'userAuth.MyUser'
AUTHENTICATION_BACKENDS = ['cocoon.userAuth.backends.EmailAuthBackend', ]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGIN_URL = "/userAuth/login/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, "static/")
MEDIA_ROOT = os.path.join(BASE_DIR, "../cocoon/media/")

# Adds a global static file that isn't linked to a particular app
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "../cocoon/static"),
]

# Information to send emails
# TODO load username and password from secret file
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'devteam@bostoncocoon.com'
EMAIL_HOST_PASSWORD = 'projectunicorn2018'
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'Bostoncocoon Team <devteam@bostoncocoon.com>'

# Admins are sent emails due to logging
ADMINS = [('Alex Agudelo', 'awagud12@gmail.com')]

# Add logging mechanisms
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # Add different formatters for more verbose logging
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {name} {message}',
            'style': '{',
        },
    },

    # Add filters for handlers to determine whether to process log record or not
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    # Determines what to do with the loggers
    'handlers': {
        # Console is only logged if Debug=True
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },

        # An email is only sent if the log comes when Debug=False
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
        },

        # Stores results if the log is greater than warn
        # Allows for easily seeing if warn errors occurred
        'file': {
            'level': 'WARNING',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'logCocoon.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {

        'django': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
        },

        # Catch all logger
        'cocoon': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'WARNING',
        },

        # UserAuth app loggers
        'cocoon.userAuth': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },

        # Survey app loggers
        'cocoon.survey': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cocoon.survey.cocoon_algorithm': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cocoon.survey.distance_matrix': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cocoon.survey.home_data': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'cocoon.survey.view': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },

        # Commute app logger
        'cocoon.commutes': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },

        # HomePage app logger
        'cocoon.homePage': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },

        # HouseDatabase app logger
        'cocoon.houseDatabase': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
