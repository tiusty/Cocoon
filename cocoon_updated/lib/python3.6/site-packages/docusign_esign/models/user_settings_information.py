# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserSettingsInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_management_granular=None, sender_email_notifications=None, signer_email_notifications=None, user_settings=None):
        """
        UserSettingsInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_management_granular': 'UserAccountManagementGranularInformation',
            'sender_email_notifications': 'SenderEmailNotifications',
            'signer_email_notifications': 'SignerEmailNotifications',
            'user_settings': 'list[NameValue]'
        }

        self.attribute_map = {
            'account_management_granular': 'accountManagementGranular',
            'sender_email_notifications': 'senderEmailNotifications',
            'signer_email_notifications': 'signerEmailNotifications',
            'user_settings': 'userSettings'
        }

        self._account_management_granular = account_management_granular
        self._sender_email_notifications = sender_email_notifications
        self._signer_email_notifications = signer_email_notifications
        self._user_settings = user_settings

    @property
    def account_management_granular(self):
        """
        Gets the account_management_granular of this UserSettingsInformation.

        :return: The account_management_granular of this UserSettingsInformation.
        :rtype: UserAccountManagementGranularInformation
        """
        return self._account_management_granular

    @account_management_granular.setter
    def account_management_granular(self, account_management_granular):
        """
        Sets the account_management_granular of this UserSettingsInformation.

        :param account_management_granular: The account_management_granular of this UserSettingsInformation.
        :type: UserAccountManagementGranularInformation
        """

        self._account_management_granular = account_management_granular

    @property
    def sender_email_notifications(self):
        """
        Gets the sender_email_notifications of this UserSettingsInformation.

        :return: The sender_email_notifications of this UserSettingsInformation.
        :rtype: SenderEmailNotifications
        """
        return self._sender_email_notifications

    @sender_email_notifications.setter
    def sender_email_notifications(self, sender_email_notifications):
        """
        Sets the sender_email_notifications of this UserSettingsInformation.

        :param sender_email_notifications: The sender_email_notifications of this UserSettingsInformation.
        :type: SenderEmailNotifications
        """

        self._sender_email_notifications = sender_email_notifications

    @property
    def signer_email_notifications(self):
        """
        Gets the signer_email_notifications of this UserSettingsInformation.

        :return: The signer_email_notifications of this UserSettingsInformation.
        :rtype: SignerEmailNotifications
        """
        return self._signer_email_notifications

    @signer_email_notifications.setter
    def signer_email_notifications(self, signer_email_notifications):
        """
        Sets the signer_email_notifications of this UserSettingsInformation.

        :param signer_email_notifications: The signer_email_notifications of this UserSettingsInformation.
        :type: SignerEmailNotifications
        """

        self._signer_email_notifications = signer_email_notifications

    @property
    def user_settings(self):
        """
        Gets the user_settings of this UserSettingsInformation.
        

        :return: The user_settings of this UserSettingsInformation.
        :rtype: list[NameValue]
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """
        Sets the user_settings of this UserSettingsInformation.
        

        :param user_settings: The user_settings of this UserSettingsInformation.
        :type: list[NameValue]
        """

        self._user_settings = user_settings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
