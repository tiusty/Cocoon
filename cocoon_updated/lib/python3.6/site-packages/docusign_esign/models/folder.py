# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Folder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error_details=None, filter=None, folder_id=None, folders=None, name=None, owner_email=None, owner_user_id=None, owner_user_name=None, parent_folder_id=None, parent_folder_uri=None, type=None, uri=None):
        """
        Folder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error_details': 'ErrorDetails',
            'filter': 'Filter',
            'folder_id': 'str',
            'folders': 'list[Folder]',
            'name': 'str',
            'owner_email': 'str',
            'owner_user_id': 'str',
            'owner_user_name': 'str',
            'parent_folder_id': 'str',
            'parent_folder_uri': 'str',
            'type': 'str',
            'uri': 'str'
        }

        self.attribute_map = {
            'error_details': 'errorDetails',
            'filter': 'filter',
            'folder_id': 'folderId',
            'folders': 'folders',
            'name': 'name',
            'owner_email': 'ownerEmail',
            'owner_user_id': 'ownerUserId',
            'owner_user_name': 'ownerUserName',
            'parent_folder_id': 'parentFolderId',
            'parent_folder_uri': 'parentFolderUri',
            'type': 'type',
            'uri': 'uri'
        }

        self._error_details = error_details
        self._filter = filter
        self._folder_id = folder_id
        self._folders = folders
        self._name = name
        self._owner_email = owner_email
        self._owner_user_id = owner_user_id
        self._owner_user_name = owner_user_name
        self._parent_folder_id = parent_folder_id
        self._parent_folder_uri = parent_folder_uri
        self._type = type
        self._uri = uri

    @property
    def error_details(self):
        """
        Gets the error_details of this Folder.

        :return: The error_details of this Folder.
        :rtype: ErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """
        Sets the error_details of this Folder.

        :param error_details: The error_details of this Folder.
        :type: ErrorDetails
        """

        self._error_details = error_details

    @property
    def filter(self):
        """
        Gets the filter of this Folder.

        :return: The filter of this Folder.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this Folder.

        :param filter: The filter of this Folder.
        :type: Filter
        """

        self._filter = filter

    @property
    def folder_id(self):
        """
        Gets the folder_id of this Folder.
        

        :return: The folder_id of this Folder.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """
        Sets the folder_id of this Folder.
        

        :param folder_id: The folder_id of this Folder.
        :type: str
        """

        self._folder_id = folder_id

    @property
    def folders(self):
        """
        Gets the folders of this Folder.
        A collection of folder objects returned in a response.

        :return: The folders of this Folder.
        :rtype: list[Folder]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """
        Sets the folders of this Folder.
        A collection of folder objects returned in a response.

        :param folders: The folders of this Folder.
        :type: list[Folder]
        """

        self._folders = folders

    @property
    def name(self):
        """
        Gets the name of this Folder.
        

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Folder.
        

        :param name: The name of this Folder.
        :type: str
        """

        self._name = name

    @property
    def owner_email(self):
        """
        Gets the owner_email of this Folder.
        

        :return: The owner_email of this Folder.
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """
        Sets the owner_email of this Folder.
        

        :param owner_email: The owner_email of this Folder.
        :type: str
        """

        self._owner_email = owner_email

    @property
    def owner_user_id(self):
        """
        Gets the owner_user_id of this Folder.
        

        :return: The owner_user_id of this Folder.
        :rtype: str
        """
        return self._owner_user_id

    @owner_user_id.setter
    def owner_user_id(self, owner_user_id):
        """
        Sets the owner_user_id of this Folder.
        

        :param owner_user_id: The owner_user_id of this Folder.
        :type: str
        """

        self._owner_user_id = owner_user_id

    @property
    def owner_user_name(self):
        """
        Gets the owner_user_name of this Folder.
        

        :return: The owner_user_name of this Folder.
        :rtype: str
        """
        return self._owner_user_name

    @owner_user_name.setter
    def owner_user_name(self, owner_user_name):
        """
        Sets the owner_user_name of this Folder.
        

        :param owner_user_name: The owner_user_name of this Folder.
        :type: str
        """

        self._owner_user_name = owner_user_name

    @property
    def parent_folder_id(self):
        """
        Gets the parent_folder_id of this Folder.
        

        :return: The parent_folder_id of this Folder.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """
        Sets the parent_folder_id of this Folder.
        

        :param parent_folder_id: The parent_folder_id of this Folder.
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def parent_folder_uri(self):
        """
        Gets the parent_folder_uri of this Folder.
        

        :return: The parent_folder_uri of this Folder.
        :rtype: str
        """
        return self._parent_folder_uri

    @parent_folder_uri.setter
    def parent_folder_uri(self, parent_folder_uri):
        """
        Sets the parent_folder_uri of this Folder.
        

        :param parent_folder_uri: The parent_folder_uri of this Folder.
        :type: str
        """

        self._parent_folder_uri = parent_folder_uri

    @property
    def type(self):
        """
        Gets the type of this Folder.
        

        :return: The type of this Folder.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Folder.
        

        :param type: The type of this Folder.
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """
        Gets the uri of this Folder.
        

        :return: The uri of this Folder.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Folder.
        

        :param uri: The uri of this Folder.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
