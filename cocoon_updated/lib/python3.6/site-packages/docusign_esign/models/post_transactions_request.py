# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PostTransactionsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, document_data=None, dpt_name=None, transaction_name=None, transaction_type_name=None):
        """
        PostTransactionsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'document_data': 'str',
            'dpt_name': 'str',
            'transaction_name': 'str',
            'transaction_type_name': 'str'
        }

        self.attribute_map = {
            'document_data': 'documentData',
            'dpt_name': 'dptName',
            'transaction_name': 'transactionName',
            'transaction_type_name': 'transactionTypeName'
        }

        self._document_data = document_data
        self._dpt_name = dpt_name
        self._transaction_name = transaction_name
        self._transaction_type_name = transaction_type_name

    @property
    def document_data(self):
        """
        Gets the document_data of this PostTransactionsRequest.
        

        :return: The document_data of this PostTransactionsRequest.
        :rtype: str
        """
        return self._document_data

    @document_data.setter
    def document_data(self, document_data):
        """
        Sets the document_data of this PostTransactionsRequest.
        

        :param document_data: The document_data of this PostTransactionsRequest.
        :type: str
        """

        self._document_data = document_data

    @property
    def dpt_name(self):
        """
        Gets the dpt_name of this PostTransactionsRequest.
        

        :return: The dpt_name of this PostTransactionsRequest.
        :rtype: str
        """
        return self._dpt_name

    @dpt_name.setter
    def dpt_name(self, dpt_name):
        """
        Sets the dpt_name of this PostTransactionsRequest.
        

        :param dpt_name: The dpt_name of this PostTransactionsRequest.
        :type: str
        """

        self._dpt_name = dpt_name

    @property
    def transaction_name(self):
        """
        Gets the transaction_name of this PostTransactionsRequest.
        

        :return: The transaction_name of this PostTransactionsRequest.
        :rtype: str
        """
        return self._transaction_name

    @transaction_name.setter
    def transaction_name(self, transaction_name):
        """
        Sets the transaction_name of this PostTransactionsRequest.
        

        :param transaction_name: The transaction_name of this PostTransactionsRequest.
        :type: str
        """

        self._transaction_name = transaction_name

    @property
    def transaction_type_name(self):
        """
        Gets the transaction_type_name of this PostTransactionsRequest.
        

        :return: The transaction_type_name of this PostTransactionsRequest.
        :rtype: str
        """
        return self._transaction_type_name

    @transaction_type_name.setter
    def transaction_type_name(self, transaction_type_name):
        """
        Sets the transaction_type_name of this PostTransactionsRequest.
        

        :param transaction_type_name: The transaction_type_name of this PostTransactionsRequest.
        :type: str
        """

        self._transaction_type_name = transaction_type_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
