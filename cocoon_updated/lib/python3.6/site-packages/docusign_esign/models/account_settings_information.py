# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountSettingsInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_settings=None):
        """
        AccountSettingsInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_settings': 'list[NameValue]'
        }

        self.attribute_map = {
            'account_settings': 'accountSettings'
        }

        self._account_settings = account_settings

    @property
    def account_settings(self):
        """
        Gets the account_settings of this AccountSettingsInformation.
        The list of account settings. These determine the features available for the account. Note that some features are determined by the plan used to create the account, and cannot be overridden.

        :return: The account_settings of this AccountSettingsInformation.
        :rtype: list[NameValue]
        """
        return self._account_settings

    @account_settings.setter
    def account_settings(self, account_settings):
        """
        Sets the account_settings of this AccountSettingsInformation.
        The list of account settings. These determine the features available for the account. Note that some features are determined by the plan used to create the account, and cannot be overridden.

        :param account_settings: The account_settings of this AccountSettingsInformation.
        :type: list[NameValue]
        """

        self._account_settings = account_settings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
